/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import stateMachine.StateMachine
import org.eclipse.emf.common.util.EList
import stateMachine.State
import stateMachine.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	
	public EList<State> _State ; 
	public EList<Transition> _Transition ; 
	 
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var element = resource.contents.get(0) as StateMachine;
		val nameMachine = element.name as String ;
		_State = element.getState(); 
		_Transition = element.getTransition();	
		
		fsa.generateFile('main/' + nameMachine + '.java', resource.init(nameMachine))
		fsa.generateFile('abstractMachine/State.java', resource.generateAbstractClassState) 
		fsa.generateFile('abstractMachine/Transition.java', resource.generateAbstractClassTransition)
		
		_State.forEach[ _state | fsa.generateFile(nameMachine + '/' + _state.name + '.java', _state.print(nameMachine))];							
		_Transition.forEach[ _transition| fsa.generateFile(nameMachine + '/' + _transition.name + '.java', _transition.print(nameMachine))];
				
		
	}
	
	

	def init(Resource r, String _nameMachine) '''
		package main;
		
		import java.util.Scanner;
		import abstractMachine.*;
		import «_nameMachine».*;
		
		public class «_nameMachine» {
		
			private static Scanner scan;
		
			public static void main(String[] args) {
				
				State open = new Open(true);
				State close = new Close(false);
				Transition on = new On(close, open);
				Transition off = new Off(open, close);
				
				Boolean init = true;
				
				while(init){
					System.out.print("Entrer la transition (on ou off) ou quitter (quit) : ");
					scan = new Scanner(System.in);
			        String choice = scan.next();
			        
			        switch (choice) {
			        
				        case "on":
				        	on.changeState();
				        	break;
				        
				        case "off":
				        	off.changeState();
				        	break;
				        
				        case "quit":
				        	System.out.println("Au revoir !");
				        	init = false;
				        	break;
				        
				        default:
				        	System.out.println("La transition saisie est incorrecte.");	
			        }
				}
				
				System.exit(0);
				
			}
		}			
	'''
	def generateAbstractClassState(Resource r) '''
		package abstractMachine;
		
		public abstract class State {
		   
		   private String name; 
		   private Boolean status;
		   
		   public String getName(){
		   		return this.name;
		   }
		   
		   public void setName(String newName){
		   		this.name = newName;
		   }
		   
		   public Boolean getStatus(){
		   		 return this.status;
		   		}
		   		   
		   public void setStatus(Boolean newStatus){
		   		 this.status = newStatus;
		   }
		      
		}		
	'''
	
	def generateAbstractClassTransition(Resource r) '''
		package abstractMachine;
				
		public abstract class Transition {
				   
			private String name; 
			private State origine; 
			private State target ; 
				   
			public String getName(){
				  return this.name;
			}
				   
			public void setName(String newName){
				   this.name = newName;
			}
			
			public State getOrigine(){
				return this.origine;
			}
				   		
			public State getTarget(){
				return this.target;
			}
			
			public void setOrigine(State newOrigine){
				this.origine = newOrigine;	
			}
			
			public void setTarget(State newTarget){
				this.target = newTarget;
			}
			
			public void changeState(){
				if(this.getTarget().getStatus() == true){
					System.out.println("Vous etes deja dans l'etat " + this.getTarget().getName());
				}
				else{
					this.getTarget().setStatus(true);
					this.getOrigine().setStatus(false);
					System.out.println("Vous etes maintenant dans l'etat " + this.getTarget().getName());
				}
			}
				      
		}		
	'''
	
	
	def print(State state, String nameMachine)'''
		package «nameMachine»;
		
		import abstractMachine.*;
		
		public class «state.name» extends State {	
		   
		   public «state.name» (Boolean status){		   		
		   		this.setName("«state.name»"); 
		   		this.setStatus(status);		   		
		   }
		   
		}
	'''
	
	def print(Transition transition, String nameMachine)'''
		package «nameMachine»;
		
		import abstractMachine.*;
		
		public class «transition.name» extends Transition{
			
			State from;
			State target;
		   
   		   public «transition.name» (State from, State target){
   		   		this.setName("«transition.name»");
   		   		this.setOrigine(from);
   		   		this.setTarget(target);
   		   }

		}	
	'''
}
