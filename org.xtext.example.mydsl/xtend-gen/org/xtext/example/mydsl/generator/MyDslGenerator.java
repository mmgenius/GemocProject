/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import stateMachine.State;
import stateMachine.StateMachine;
import stateMachine.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  public EList<State> _ListState;
  
  public EList<Transition> _ListTransition;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("StateMachineMain.java", this.init(resource));
    fsa.generateFile("State.java", this.interfaceState(resource));
    EObject _get = resource.getContents().get(0);
    StateMachine element = ((StateMachine) _get);
    this._ListState = element.getState();
    final Consumer<State> _function = (State _state) -> {
      String _name = _state.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.state(resource, _state));
    };
    this._ListState.forEach(_function);
    this._ListTransition = element.getTransition();
    final Consumer<Transition> _function_1 = (Transition _transition) -> {
      String _name = _transition.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.transition(resource, _transition));
    };
    this._ListTransition.forEach(_function_1);
  }
  
  public CharSequence init(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package StateMachine");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class StateMachineDemo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public String state;");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("state.printState();");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence interfaceState(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package StateMachine");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface State {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public void printState();");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence state(final Resource r, final State state) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package StateMachine");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = state.getName();
    _builder.append(_name);
    _builder.append(" implements State {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("   ");
    _builder.append("private String name = ");
    String _name_1 = state.getName();
    _builder.append(_name_1, "   ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public void printState() {");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("System.out.println(\" L\'etat est : ");
    String _name_2 = state.getName();
    _builder.append(_name_2, "   \t\t");
    _builder.append("\");\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence transition(final Resource r, final Transition transition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package StateMachine");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = transition.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("   ");
    _builder.append("private String name = ");
    String _name_1 = transition.getName();
    _builder.append(_name_1, "   ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public void setState(){");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("this.state = ");
    String _name_2 = transition.getTarget().getName();
    _builder.append(_name_2, "         ");
    _builder.append(";\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
}
